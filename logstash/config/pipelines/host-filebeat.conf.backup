input {
    redis {
        host => "traefik"
        port => "8580"
        password => "Y&hZ&lgooHaW"
        codec => "json"
        data_type => "list"
        key => "filebeat"
        db => "0"
        batch_count => "125"
        threads => "8"
    }
}

filter {
    ruby {
        code => "event.set('index_day', event.get('@timestamp').time.localtime('+09:00').strftime('%Y.%m.%d'))"
    }

    #if [event][module] == "kibana" {
    #    json {
    #        source => "message"
    #        target => "kibana"
    #        skip_on_invalid_json => true
    #        remove_field => "message"
    #    }
    #}

    #if [event][module] == "traefik" {
    #    json {
    #        source => "message"
    #        target => "traefik"
    #        #skip_on_invalid_json => true
    #    }
    #}
    
    if "PCAP" in [agent][name] {
        json {
            source => "message"
            target => "pcap"
            skip_on_invalid_json => true
            remove_field => "message"
        }
        
        if [pcap][layers][data] {
            split {
                field => "[pcap][layers][data]"
                add_field => { "[pcap][filtering][payload]" => "%{[pcap][layers][data]}" }
                remove_field => "[pcap][layers]"
            }

            ruby {
                code => "event.set('[pcap][filtering][payload]', event.get('[pcap][filtering][payload]').split('/../').pack('H*'))"
            }
        }
    }

    if [event][module] == "nginx" {
        if [fileset][name] == "access" {
            json {
            	source => "message"
            	target => "nginx"
            	skip_on_invalid_json => true
            	remove_field => "message"
            }

            geoip {
                source => "[nginx][access][remote_addr]"
                target => "[geo]"
            }
            
            mutate { copy => { "[nginx][access][uri]" => "[url][original]" } }
            mutate { copy => { "[nginx][access][body_bytes_sent]" => "[http][response][body][bytes]" } }

            if [nginx][access][request_method] in "GET" {
                kv {
                    source => "[nginx][access][request_parameters]"
                    target => "[nginx][access][parameters]"
                    field_split => "&"
                }
                mutate { remove_field => [ "[nginx][access][request_parameters]" ] }
            } else if [nginx][access][request_method] in "POST" {
                kv {
                    source => "[nginx][access][request_body]"
                    target => "[nginx][access][body]"
                    field_split => "&"
                }
                mutate { remove_field => [ "[nginx][access][request_body]" ] }
                if [nginx][access][body][data] {
                    urldecode{ field => "[nginx][access][body][data]" }
                    json {
                        source => "[nginx][access][body][data]"
                        target => "[nginx][access][data]"
                        skip_on_invalid_json => true
                        remove_field => "[nginx][access][body][data]"
                    }
                }
            }
	} else if [fileset][name] == "error" {
            grok {
                match => { "message" => ["%{DATA:[nginx][error][time]} \[%{DATA:[log][level]}\] %{NUMBER:[process][pid]:int}#%{NUMBER:[process][thread][id]:int}: (\*%{NUMBER:[nginx][error][connection_id]:int} )?%{GREEDYDATA:message}"] }
                add_field => { "[event][created]" => "%{@timestamp}" }
            }
            if ("_grokparsefailure" not in [tags]) {
                if [event][timezone] {
                    date {
                        match => [ "[nginx][error][time]", "yyyy/MM/dd H:m:s" ]
                        timezone => "%{[event][timezone]}"
                        remove_field => "[nginx][error][time]"
                    }
                } else {
                    date {
                       match => [ "[nginx][error][time]", "yyyy/MM/dd H:m:s" ]
                       remove_field => "[nginx][error][time]"
                    }
                }
            }

        }
    }
}

output {
    elasticsearch {
        hosts => ["es-mt01:9200","es-mt02:9200","es-mt03:9200"]
        index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{[index_day]}"
        template_name => "filebeat-*"

        #manage_template => false
        #ilm_enabled => "true"
        #ilm_pattern => "{now/d}-000001"
        #ilm_policy => "filebeat-7.3.2"
        #ilm_rollover_alias => "filebeat-7.3.2"
    }
    #stdout { codec => rubydebug }
}
